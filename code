board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]

def print_board (board):
    for i in range(len(board)):
        if i%3==0 and i!=0:
            print ("-----------")
        
        for j in range (len(board[0])):
            if j%3 == 0 and j!=0:
                print ("|",end="")
            if j==8:
                print (board[i][j])
            else:
                print (str(board[i][j])+"",end="")
                
def solve(board):
    find = find_empty (board)
    if not find:
        return True #found the solution
    else:
        row, col = find 
    
    for i in range(1,10):
        if valid(board, i, (row,col)): #if the number is valid for that position
            board[row][col]=i #plug in the number to the position
            
            if solve(board):  #recursively call to finish the solution, solve again with new value added
                return True
            
            board[row][col] = 0 #reset the position, try different value
            
    return False
            
def valid(board, num, pos):
    #check row
    for i in range(len(board[0])):
        #if ith element of a row is equal to num and is not the position the number was just inserted
        if board[pos[0]][i] == num and pos[1] != i:
            return False
    #check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False
    #check square
    #check which box the num is in
    box_x = pos[1]//3
    box_y = pos[0]//3
    
    for i in range(box_y*3, box_y*3 + 3): #column
        for j in range (box_x*3, box_x*3 + 3): #row
            if board[i][j] == num and (i,j) != pos:
                return False
    return True
        
    
def find_empty (board):
    for i in range (len(board)):
        for j in range (len(board[0])):
            if board[i][j]==0:
                return (i,j) #row,col
    return None
    

print_board(board)
solve(board)
print("__________________________")
print_board(board)
